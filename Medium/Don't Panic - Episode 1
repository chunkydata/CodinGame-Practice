# =============================================================================
# https://www.codingame.com/ide/puzzle/don't-panic-episode-1
# 
# The Goal:
#     
# You need to help Marvin and his clones (or is it the other way round?) reach the exit in order to help them
# escape the inside of the Infinite Improbability Drive.
# 
# Rules:
#     
# The drive has a rectangular shape of variable size. It is composed of several floors (0 = lower floor)
# and each floor has several possible positions that the clones can occupy (0 = leftmost position, width - 1 = rightmost position).
# 
# The goal is to save at least one clone in a limited amount of rounds.
# 
# The details:
# 
#     Clones appear from a unique generator at regular intervals, every three game turns.
#     The generator is located on floor 0. Clones exit the generator heading towards the right.
# 
#     Clones move one position per turn in a straight line, moving in their current direction.
# 
#     A clone is destroyed by a laser if it is goes below position 0 or beyond position width - 1.
# 
#     Elevators are scattered throughout the drive and can be used to move from one floor to the one above.
#     When a clone arrives on the location of an elevator, it moves up one floor. Moving up one floor takes one game turn.
#     On the next turn, the clone continues to move in the direction it had before moving upward.
# 
#     On each game turn you can either block the leading clone - meaning the one that got out the earliest - or do nothing.
# 
#     Once a clone is blocked, you can no longer act on it. The next clone in line takes the role of "leading clone" and can be blocked at a later time.
# 
#     When a clone moves towards a blocked clone, it changes direction from left to right or right to left.
#     It also changes direction when getting out of the generator directly on a blocked clone or when going up an elevator onto a blocked clone.
# 
#     If a clone is blocked in front of an elevator, the elevator can no longer be used.
# 
#     When a clone reaches the location of the exit, it is saved and disappears from the area.
# 
# Note: For this puzzle there is at most one elevator per floor.
# =============================================================================

def targeting(clone_floor, all_elevator_pos, exit_floor, exit_pos):
    if clone_floor == exit_floor:
        return exit_pos
    else:
        return all_elevator_pos[clone_floor]

def stopping(clone_floor, clone_pos, target_pos, direction):
    direction_to_int = {'LEFT':-1, 'RIGHT':1}
    situation = (target_pos - clone_pos) * direction_to_int[direction]
    if situation >= 0:
        print("WAIT")
    else:
        print("BLOCK")

# nb_floors: number of floors
# width: width of the area
# nb_rounds: maximum number of rounds
# exit_floor: floor on which the exit is found
# exit_pos: position of the exit on its floor
# nb_total_clones: number of generated clones
# nb_additional_elevators: ignore (always zero)
# nb_elevators: number of elevators
nb_floors, width, nb_rounds, exit_floor, exit_pos, nb_total_clones, nb_additional_elevators, nb_elevators = [int(i) for i in input().split()]

all_elevator_pos = {}
for i in range(nb_elevators):
    # elevator_floor: floor on which this elevator is found
    # elevator_pos: position of the elevator on its floor
    elevator_floor, elevator_pos = [int(j) for j in input().split()]
    all_elevator_pos[elevator_floor] = elevator_pos

# game loop
while True:
    inputs = input().split()
    clone_floor = int(inputs[0])  # floor of the leading clone
    clone_pos = int(inputs[1])  # position of the leading clone on its floor
    direction = inputs[2]  # direction of the leading clone: LEFT or RIGHT

    if clone_floor < 0:
        print("WAIT")
    else:
        stopping(clone_floor, clone_pos, targeting(clone_floor, all_elevator_pos, exit_floor, exit_pos), direction)
